#ifndef EN_TETE_PRINCIPALE
#define EN_TETE_PRINCIPALE

#define LONGUEUR_LIGNE 100
#define LONGUEUR_NOM_VILLE 50
#define LONGUEUR_NOM_CONDUCTEUR 50
#define PREMIER_NOM_VILLE "Ville_Test_0"

typedef enum CodeErreur {
    CODE_OK,
    CODE_ARG_NULL,
    CODE_ARG_INVALIDE,
    CODE_MALLOC_ECHOUE,
    CODE_ERREUR_OUVERTURE_FICHIER,
    CODE_ERREUR_LECTURE_FICHIER,
    CODE_ERREUR_CREATION_FICHIER,
    CODE_ERREUR_ECRITURE_FICHIER,
    CODE_FONCTION_ECHOUEE,
    CODE_ERREUR_INCONNUE
} CodeErreur;

void* zero_memory(void* bloc, unsigned long long taille);

#endif

#ifndef EN_TETE_AVL_T
#define EN_TETE_AVL_T

#include "principale.h"

typedef struct AVL_t {
    struct AVL_t* g;
    struct AVL_t* d;
    char* nom_ville;
    int compte;
    int debut;
    int hauteur;
} AVL_t;

typedef enum Bool {
    faux, vrai
} Bool;

AVL_t* creerAVL_t(const char* nom_ville);
void libererAVL_t(AVL_t* AVL);
AVL_t* insererAVL_t(AVL_t* noeud, const char* nom_ville, Bool estDebut);

#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "AVL_t.h"

int max(const int a, const int b) {
    return (a > b) ? a : b;
}

AVL_t* creerAVL_t(const char* nom_ville) {
    AVL_t* noeud = (AVL_t*)malloc(sizeof(AVL_t));
    if (noeud == NULL) {
        printf("Échec d'allocation mémoire\n");
        exit(EXIT_FAILURE);
    }

    noeud->nom_ville = strdup(nom_ville);
    if (noeud->nom_ville == NULL) {
        printf("Échec d'allocation mémoire\n");
        zero_memory(noeud, sizeof(*noeud));
        free(noeud);
        exit(EXIT_FAILURE);
    }

    noeud->g = NULL;
    noeud->d = NULL;
    noeud->debut = 0;
    noeud->compte = 1;
    noeud->hauteur = 1;

    return noeud;
}

void libererAVL_t(AVL_t* racine) {
    if (racine == NULL) return;
    libererAVL_t(racine->g);
    libererAVL_t(racine->d);
    free(racine->nom_ville);
    zero_memory(racine, sizeof(*racine));
    free(racine);
}

// Reste du code AVL_t (rotationDroite, rotationGauche, getEquilibre, insererAVL_t)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "./processus_s.h"

int fonctionTri_s(const void* arg1, const void* arg2);

CodeErreur ObtenirTop50(AVL_s* avl, int* compte, AVL_s* tab[50]);
CodeErreur parcourirAVL(AVL_s* avl, int* compte, AVL_s* tab[50]);
CodeErreur TraitementArgumentS(int argc, char const* argv[]);

// Reste du code processus_s.c
